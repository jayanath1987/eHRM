<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class securityDao extends BaseDao {

    public function readCapability($id) {
        try {
            return Doctrine::getTable('capability')->find($id);
        } catch (Exception $e) {
            throw new DaoException($e->getMessage());
        }
    }

    public function readPayprocessEmp($employeeId, $capabilityId, $cmbDistrict) {
        return Doctrine::getTable('payprocessCapability')->find(array($employeeId, $capabilityId, $cmbDistrict));
    }

    public function readUser($id) {

        $q = Doctrine_Query::create()
                ->select('u.*')
                ->from('Users u')
                ->where('emp_number=' . $id);
        return $q->execute();
    }

    public function saveCapability(capability $capb) {

        $capb->save();
        return true;
    }

    public function getLastSaveID() {
        $q = Doctrine_Query::create()
                ->select('MAX(sm_capability_id)')
                ->from('capability');
        return $q->fetchArray();
    }

    public function getCapablities() {
        $q = Doctrine_Query::create()
                ->from('capability c');
        return $q->execute();
    }

    public function getModuleList() {

        $q = Doctrine_Query::create()
                ->from('Module m');
        return $q->execute();
    }

    public function LoadMenus($capId, $moduleId) {
        $q = Doctrine_Query::create()
                ->select('m.*')
                ->from('menuitem m')
                ->leftjoin('m.mnucapability mc')
                ->where('m.mod_id = ?', $moduleId)
                ->andwhere('mc.sm_capability_id = ?', $capId);

        return $q->execute();
    }

    public function getmoduleMenuCapabilityList($capID) {
        $q = Doctrine_Query::create()
                ->select('m.*,c.*')
                ->from('menuitem m')
                ->leftjoin('m.mnucapability c ')
                ->where('c.sm_capability_id = ?', array($capID));




        return $q->execute();
    }

    public function getmoduleMenuList($moduleId) {
        $q = Doctrine_Query::create()
                ->select('m.*')
                ->from('menuitem m')
                ->where('m.mod_id = ?', $moduleId)
                ->orderby('m.sm_mnuitem_position');

        return $q->execute();
    }

    public function loadReports($capabilityId, $moduleId) {
        $q = Doctrine_Query::create()
                ->select('r.*')
                ->from('ReportDetails r')
                ->leftjoin('r.ReportCapability rc')
                ->where('r.mod_id = ?', $moduleId)
                ->andwhere('rc.sm_capability_id = ?', $capabilityId);

        return $q->execute();
    }

    public function getModuleReportList($moduleId) {
        $q = Doctrine_Query::create()
                ->select('r.*')
                ->from('ReportDetails r')
                ->where('r.mod_id = ?', $moduleId)
                ->orderby('r.rn_rpt_name');

        return $q->execute();
    }

    public function deleteReportCapabilities($capabilityId, $reportId) {
        $q = Doctrine_Query::create()
                ->delete('ReportCapability')
                ->where('rn_rpt_id = ?', $reportId)
                ->andwhere('sm_capability_id = ?', $capabilityId);

        $numDeleted = $q->execute();
        if ($numDeleted > 0) {
            return true;
        }
        return false;
    }

    public function saveReportCapabilities(ReportCapability $rc) {
        $rc->save();
        return true;
    }

    public function saveMnuCapabilities(mnucapability $m1) {
        $m1->save();
        return true;
    }

    public function deleteMnuCapabilities($mnuId, $capId) {
        //die(print_r($capId));
        $q = Doctrine_Query::create()
                ->delete('mnucapability')
                ->where('sm_mnuitem_id=' . $mnuId)
                ->andwhere('sm_capability_id= ?', array($capId));

        $numDeleted = $q->execute();
        if ($numDeleted > 0) {
            return true;
        }
        return false;
    }

    public function getUserListbyCapaId($id) {
        $q = Doctrine_Query::create()
                ->from('Users u')
                ->innerJoin('u.employee e on u.emp_number=e.emp_number')
                ->where('u.sm_capability_id = ?', $id)
                ->andwhere('u.sm_capability_id !=');

        return $q->execute();
    }

    public function getEmployee($insList = array()) {

        try {
            if (is_array($insList)) {
                $q = Doctrine_Query::create()
                        ->select('e.*')
                        ->from('Employee e')
                        ->whereIn('e.emp_number', $insList);

                return $q->fetchArray();
            }
        } catch (Exception $e) {
            throw new DaoException($e->getMessage());
        }
    }

    public function getCompnayStructure($id) {
        try {
            return Doctrine::getTable('CompanyStructure')->find($id);
        } catch (Exception $e) {
            throw new DaoException($e->getMessage());
        }
    }

    public function GetListedEmpids($cid) {

        $q = Doctrine_Query::create()
                ->select('u.*')
                ->from('Users u')
                ->where('u.sm_capability_id = ?', $cid);


        return $q->fetchArray();
    }

    public function UpdateUserCapability($employeeId, $capabilityId) {


        $q = Doctrine_Query::create()
                ->update('Users u')
                ->set('u.sm_capability_id', '?', $capabilityId)
                ->where('u.emp_number = ?', $employeeId);

        return $q->execute();
    }

    public function UpdatePayProcCapability($employeeId, $capabilityId) {


        $q = Doctrine_Query::create()
                ->update('payprocessCapability u')
                ->set('u.prl_type_code', '?', $capabilityId)
                ->where('u.emp_number = ?', $employeeId);

        return $q->execute();
    }

    public function checkboxIdList($moduleId, $id, $flag, $currentMenuPostionValue, $currentParent, $parentCurrnetLevelValue, $rootParentId) {

        $q = Doctrine_Query::create()
                ->select('m.*')
                ->from('menuitem m')
                ->where('m.mod_id = ?', $moduleId);


        if ($flag == 1) {
            $q->andWhere("m.sm_mnuitem_parent<'$currentParent'");
            $q->andwhere("m.sm_mnuitem_position < '$currentMenuPostionValue'");
            $q->andwhere("m.sm_mnuitem_position >= '$parentCurrnetLevelValue'");
        } elseif ($flag == 0) {


            $q->andWhere("m.sm_mnuitem_parent>'$currentParent'");
            $q->andwhere("m.sm_mnuitem_position > '$currentMenuPostionValue'");
            $q->andwhere("m.sm_mnuitem_position < '$currentMenuPostionValue'");
        }


        return $q->fetchArray();
    }

    public function getMenuCurrentPosition($id) {
        $q = Doctrine_Query::create()
                ->select('m.*')
                ->from('menuitem m')
                ->where('m.sm_mnuitem_id = ?', array($id));


        return $q->fetchArray();
    }

    public function getParentCurrentId($id) {
        $q = Doctrine_Query::create()
                ->select('m.*')
                ->from('menuitem m')
                ->where('m.sm_mnuitem_parent = ?', $id);


        return $q->fetchArray();
    }

    public function getParentCurrentIdByPosition($id) {
        $q = Doctrine_Query::create()
                ->select('m.*')
                ->from('menuitem m')
                ->where('m.sm_mnuitem_position = ?', $id);


        return $q->fetchArray();
    }

    public function getSaveCapObj($request, $capability) {
        if (strlen($request->getParameter('txtCapbName'))) {
            $capability->setSm_capability_name(trim($request->getParameter('txtCapbName')));
        } else {
            $capability->setSm_capability_name(null);
        }
        if (strlen($request->getParameter('txtCapbNameSI'))) {
            $capability->setSm_capability_name_si(trim($request->getParameter('txtCapbNameSI')));
        } else {
            $capability->setSm_capability_name_si(null);
        }
        if (strlen($request->getParameter('txtCapbNameTA'))) {
            $capability->setSm_capability_name_ta(trim($request->getParameter('txtCapbNameTA')));
        } else {
            $capability->setSm_capability_name_ta(null);
        }
        if (strlen($request->getParameter('chkStatus'))) {
            $capability->setSm_capability_enable_flag($request->getParameter('chkStatus'));
        } else {
            $capability->setSm_capability_enable_flag(0);
        }
        return $capability;
    }

    public function getPayrollType() {
        $q = Doctrine_Query::create()
                ->select('p.*')
                ->from('PayrollType p');

        return $q->execute();
    }

    public function getUserListbyPayprocess($payRollTypeID, $disctrictId, $Procetype) {

        $q = Doctrine_Query::create()
                ->from('payprocessCapability p')
                ->innerJoin('p.Employee e on p.emp_number=e.emp_number')
                ->where('p.prl_type_code = ?', array($payRollTypeID))
                ->andWhere('p.prl_disc_code=?', array($disctrictId))
                ->andWhere('prl_process_type=?', array($Procetype));


        return $q->execute();
    }

    public function getProcessUserCpaByID($cid) {

        $q = Doctrine_Query::create()
                ->select('p.*')
                ->from('payprocessCapability p')
                ->where('p.prl_type_code = ?', $cid);


        return $q->fetchArray();
    }

    public function getDistrcitList() {
//die("df");
        $q = Doctrine_Query::create()
                ->select('p.*')
                ->from('CompanyStructure p')
                ->where('p.def_level = 3')
                ->orderby('p.title ASC');

        return $q->execute();
    }

    public function getDivisionList() {
//die("df");
        $q = Doctrine_Query::create()
        ->select('p.*')
        ->from('CompanyStructure p')
        ->where('p.def_level = 4')
        ->orderby('p.title ASC');
        return $q->execute();
    }
    
        public function readIsRecordExist($employeeId,$cmbDistrict) {

        $q = Doctrine_Query::create()
                ->from('payprocessCapability p')
                ->where('p.emp_number = ?', array($employeeId));
                //->andWhere('p.prl_disc_code=?', array($cmbDistrict));


        return $q->execute();
    }

}

?>
